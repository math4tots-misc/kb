test Add
    list = []
    assert ADD(list, 10) is list
    assert ADD(list, 20) is list
    assert list == [10, 20]
end

test Pop
    list = [1, 2, 3]
    assert POP(list) == 3
    assert list == [1, 2]
    assert POP(list) == 2
    assert list == [1]
    assert POP(list) == 1
    assert list == []
    assert throw POP(list)
end

test Remove
    list = [1, 2, 3]
    assert REMOVE(list, 0) == 1
    assert list == [2, 3]
end

test Get
    list = ['aaa', 'bb', 'c']
    assert list[0] == 'aaa'
    assert list[-1] == 'c'
    assert list[1] == 'bb'
    assert list[2] == 'c'

    # index out of bounds
    assert throw list[3]
    assert throw list[-4]
end

test Comprehension
    list = [x / 2 for x in range(5, 10)]
    assert list == [2.5, 3, 3.5, 4, 4.5]

    list = [x * 4 for x in range(10) if x < 5]
    assert list == [0, 4, 8, 12, 16]
end

test Sort
    list = []
    assert SORT(list) is nil
    assert list == []

    list = [44, 1, -1, -2, -3, 2, 3, 55]
    assert SORT(list) is nil
    assert list == [-3, -2, -1, 1, 2, 3, 44, 55]

    # 1 and 'a' are not comparable
    list = [1, 'a']
    assert throw SORT(list)
end

test ForIn
    # Lists should be usable in for loops
    list = []
    for x in ['a', 'b', 'c', 'd']
        ADD(list, CAT(x, 10))
    end
    assert list == ["a10", "b10", "c10", "d10"]
end

test Conversion
    list = LIST({3, 1, 2})
    assert list == [1, 2, 3]

    list = LIST({'a': 3, 1: 'b', 2: 'd'})
    assert list == [[1, 'b'], [2, 'd'], ['a', 3]]

    list = LIST(range(3, 10, 2))
    assert list == [3, 5, 7, 9]

    original = [{}, 'bob', 654.321]
    list = LIST(original)
    assert list == original
    assert list is not original
    ADD(original, 10)
    assert list == [{}, 'bob', 654.321]
    assert original == [{}, "bob", 654.321, 10]
end

test Extend
    list = [1, 2, 3]
    EXTEND(list, ['a', 'b', 'c'])
    assert list == [1, 2, 3, 'a', 'b', 'c']

    EXTEND(list, {'aa', 'bb', 'cc'})
    assert list == [1, 2, 3, 'a', 'b', 'c', 'aa', 'bb', 'cc']
end

test DestructuringAssignment
    # too few args
    assert throw
        [a, b] = [1]
    end

    assert throw
        [a, b, *c] = [1]
    end

    # too many args
    assert throw
        [a, b] = [1, 2, 3]
    end

    [a, b, *c] = [1, 2, 3, 4, 5]
    assert a == 1
    assert b == 2
    assert c == [3, 4, 5]

    [a, b, *c] = [1, 2]
    assert a == 1
    assert b == 2
    assert c == []

    [a, b] = {2, 1}
    assert a == 1
    assert b == 2

    [a, b] = {1, -1}
    assert a == -1
    assert b == 1
end
