test Str
    # When getting the elements as a list,
    # the set will always sort the input so that the
    # values are deterministic
    #
    # If different types are mixed in, values will
    # be sorted first by type, then all elements of
    # the same type will be sorted together
    #

    set = {3, 2, 1}

    assert set == {1, 2, 3}
    assert STR(set) == "{1, 2, 3}"


    set = {'a', 3, 2, 1, "b", "ab"}
    assert set == {1, 2, 3, "a", "ab", "b"}
    assert STR(set) == '{1, 2, 3, "a", "ab", "b"}'
end

test Add
    set = {3, 2, 1}

    assert ADD(set, 10) is set
    assert set == {1, 2, 3, 10}

    assert ADD(set, 3) is set
    assert set == {1, 2, 3, 10}

    assert ADD(set, 10) is set
    assert set == {1, 2, 3, 10}
end

test In
    set = {'a', 2, 5.5}
    assert 'a' in set

    # maps are not hashable
    assert throw {1: 2} in set
end

test Cmp
    # Sets are compared as though they are lists whose elements
    # have been sorted
    assert {1, 2, 3} > {1}
    assert {1, 2, 3} > {1, 2}
    assert {1, 3, 2} > {1, 2}
    assert {1, 2, 3} >= {1, 2}
    assert {1, 2, 3} <= {1, 2, 3}
    assert {1, 2, 3} < {1, 2, 3, 4}
end

test ForIn
    list = []
    set = {'a', 7, 2, 5.5}
    for x in set
        ADD(list, x)
    end
    assert list == [2, 5.5, 7, "a"]
end

test Conversion
    list = ['a', 'bb', 6.6]
    set = SET(list)
    assert set == {6.6, "a", "bb"}
end
